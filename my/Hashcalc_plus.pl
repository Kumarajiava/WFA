#!/usr/bin/perl -w 

use strict;
use Tk;
#use Tk::DirTree;
use Tk::PathEntry;
use Cwd;
use File::Spec;
use File::Basename;
use Digest::MD5;
use Digest::SHA;
use IO::File;
use IO::Handle;
use Win32::Clipboard;
use Encode;
use encoding 'gbk';

my @ph;
my $cwd0;
my $FFILE;
my $ext = 'MD5.txt';
my $kingst = 'MD5.txt\'s MD5';
my $main = MainWindow->new;
#=pod
my $filedir;
my $filedirr = $main->Entry(-width => 103,-textvariable =>\$filedir,);
$filedir = $main->PathEntry(-width => 103,
                    -initialdir =>'',
                    -textvariable =>\$filedir,
                    -autocomplete => 1,
                    -pathcompletion => '<Tab>',
                    -dircolor => 'red',
					#-selectcmd => sub {$filedirr->pack;},
        )->pack;
#=cut
#
my $butt_frame = $main->Frame()->pack();
$butt_frame->Button(-text => 'HASHCALC_MD5',
    -command => sub{do_fax(1, $filedirr)},
)->pack(-side => 'left');
$butt_frame->Button(-text => 'HASHCALC_SHA256',
    -command => sub{do_fax(2, $filedirr)},
)->pack(-side => 'left');
my $fire_frame = 0;
MainLoop;

sub do_fax {
    my ($hashgsett, $filedirr) = @_;
    my $hashgset = $hashgsett;

    my $filedir_val = $filedirr->get;
	
    #my $filedir_val = $filedir;
    if ($fire_frame) {
        $fire_frame->packForget;
    }
    $fire_frame = $main->Frame()->pack(-side => 'bottom');
    if (-d $filedir_val){
        do_check($filedir_val);
        hashcalc($hashgset);
        do_pri(@ph);
        undef @ph;
    }else{
		if (1) {
			my $f = $0.'temp';
			my $FFS = IO::File->new($f,q{>} );
			$FFS->autoflush();
			print $FFS encode('gbk',$filedir_val);	
			$FFS->close;
			$FFS = IO::File->new($f);
			my @sdf = <$FFS>;
			$filedir_val = shift @sdf;
			undef $FFS;
		}
        my $FH=IO::File->new($filedir_val);
        binmode $FH,':raw';
        my $hash;
        if ($hashgset == 1) {
            $hash=Digest::MD5->new->addfile(*$FH)->hexdigest;
        }else{
            $hash=Digest::SHA->new(256)->addfile(*$FH)->hexdigest;
        }
        $FH->close;
        $fire_frame->Label(-text => $hash)->pack;
        my $CLIP = Win32::Clipboard();
        $CLIP->Set($hash);
    }
    return 1;
}

sub do_pri{
    my @items = @_;
    my $box = $fire_frame->Scrolled('Listbox',
                  -width => 99,
                  -scrollbars => 'osoe',
                  -relief => 'sunken',
                  )->pack(-side   =>'bottom',
                      -fill   => 'y',
                      -expand => 1,
                      -padx   => 2);
    foreach (@items) {
       $box->insert('end', $_);
    }
    return 1;
}

sub do_check{
    ($cwd0)=@_;
    $cwd0=~s{\/}{\\}g;
    #chomp $cwd0;
    $fire_frame->packForget unless (chdir ($cwd0));
    return 1;
}
sub hashcalc{
    my $hashgset = @_;
    my @files = glob q{*};
    $ext ='SHA256.txt' if $hashgset == 2;
    $ext ='MD5.txt' if $hashgset == 1;
    my $md5=File::Spec->catfile($cwd0, $ext);
    $FFILE = IO::File->new($ext,q{>} );
    $FFILE->autoflush();
    my $gctime = localtime;
    my $timm;
    if ($hashgset == 1) {
        $timm = "# MD5 checksums generated by Hashcalc_Plus \n# Generated $gctime\n";
    }else{
        $timm = "# SHA256 checksums generated by Hashcalc_Plus \n# Generated $gctime\n";
    }
    print $FFILE $timm;
    $fire_frame->Label(-text => $timm)->pack;
    foreach my $file(@files)
    {
		Encode::_utf8_off($cwd0);
		Encode::_utf8_off($file);
        my $path = File::Spec->catfile($cwd0,$file);
        filelist($path,$hashgset);
    }
    $FFILE->close;
    my $cpfile;

    if (-e $md5) {
        my $FHH=IO::File->new($md5);
        binmode $FHH,':raw';
        if ($hashgset == 1) {
            $cpfile = Digest::MD5->new->addfile(*$FHH)->hexdigest;
        }else{
            $cpfile = Digest::SHA->new(256)->addfile(*$FHH)->hexdigest;
        }
        $FHH->close;
    }
    $kingst = 'SHA256.txt\'s SHA256' if $hashgset== 2; 
    $fire_frame->Label(-text => "$kingst:\n$cpfile\n it's Clipboard now\n")->pack;
    my $CLIP = Win32::Clipboard();
    $CLIP->Set($cpfile);
    $fire_frame->Label(-text => "+++++++++++++++end!+++++++++++++++\n")->pack;
    return 1;
}

sub filelist{
    my ($path,$hashgset) = @_;
    my $file_name = basename $path;
    if(-d $file_name)
    {
        chdir $path or die "can't chdir $path:$!";
        my $cwd = getcwd;
        my @files = glob q{*};
        my $count = 0;
        foreach my $file(@files)
        {
            $count++;
			Encode::_utf8_off($cwd);
			Encode::_utf8_off($file);
            my $path = File::Spec->catfile( $cwd, $file );
            &filelist($path,$hashgset);
        }
        if ($count eq @files)
        {
            my $dir_name = dirname $path; 
            chdir "$dir_name\..";
        }
    }
    else
    {
        my $FH=IO::File->new($path);
        binmode $FH,':raw';
        my $hash;
        if ($hashgset == 1) {
            $hash=Digest::MD5->new->addfile(*$FH)->hexdigest;
        }else{
            $hash=Digest::SHA->new(256)->addfile(*$FH)->hexdigest;
        }
        $FH->close;
        my $cwd1=$cwd0;
        $cwd1=~s/[\/\\]/\#/g;
        $path=~s/[\\\/]/\#/g;
        $path=~s{$cwd1}{\.}gi;
        $path=~s/\#/\\/g;
        print $FFILE "<======$hash======> $path\n";
        push @ph,"<======$hash======> $path\n";
    }
    return 1;
}
